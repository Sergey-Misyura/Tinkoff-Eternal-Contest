'''Задача I. Фудкорт

Даня в обеденный перерыв ходит в одно и то же кафе.
Ему, как сотруднику банка, положено специальное предложение:
при каждой покупке больше, чем на 100 рублей, Даня получает купон на бесплатный обед.
Даня узнал стоимость своих обедов на ближайшие n дней.
Ему хочется минимизировать свои затраты, грамотно используя талоны.
Требуется найти минимальные суммарные затраты Дани на обеды.
Формат входных данных
В первой строке дается натуральное число n (0 ≤ n ≤ 100).
В каждой из n строк записана стоимость обеда в каждой из дней (неотрицательное целое число, не больше, чем 300).
Формат выходных данных
В первой строке выдайте минимально возможную суммарную стоимость обедов.
Замечание
В первом примере Дане придется купить первые 3 обеда, после чего у него появится талон.
Этот талон будет выгоднее всего потратить на последний обед.
Таким образом, он купит первые 4 обеда и получит пятый бесплатный.
Примеры данных
Пример 1
Ввод:
5
35
40
101
59
63
Вывод: 235'''

# PT 0 tests
import numpy as np

n = int(input())
dinners = [int(input()) for _ in range(n)]


if n == 0:
    print(0)
else:
    k_max = len([i for i in dinners if i > 100])
    dp = np.zeros((k_max+2, n), dtype=int)
    dp.fill(999999)
    k=0
    
    if dinners[0] > 100:
        dp[1][0] = dinners[0]
        k = 1
    else:
        dp[0][0] = dinners[0]
    
    for j in range (0,n-1):
        
        for i in range (k+1):
            
            if dinners[j] <= 100:
                dp[i][j + 1] = min(dp[i][j] + dinners[j+1], dp[i+1][j])
            else:
                if k != 0:
                    dp[i][j + 1] = min(dp[i-1][j] + dinners[j+1], dp[i+1][j])
                dp[i+1][j + 1] = dp[i][j] + dinners[j+1]
                k+=1

    print(list(dp.min(axis=0))[-1])