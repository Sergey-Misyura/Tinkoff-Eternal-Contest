'''Задача F. Физкультура

На физкультуре происходит разбиение по двум командам.
Ребята выстроены в шеренгу, у каждого из них есть свой рост a_i
Разбиение по командам произойдет по принципу «четный-нечетный»
— все школьники с четным ростом отправляются в одну команду, а нечетные — в другую.
В отличие от привычного урока, ребята не выстроились по росту.
Вместо привычного порядка они встали случайно. Теперь физрук Яша смотрит на шеренгу и думает
— может ли ровно одна пара учеников поменяться местами так,
чтобы команды оказались такими же, как и по принципу «первый-второй».
Иначе говоря, он хочет получить такой порядок,
при котором все ученики с четным ростом стоят на четных позициях, а с нечетным — на нечетных.
Помогите Яше найти нужную замену.
Формат входных данных
В первой строке находится число n (2 ≤ n ≤ 1000) — количество учеников в шеренге.
В следующей строке находится n натуральных чисел a_i (1 ≤ a_i ≤ 10^9) — рост учеников.
Формат выходных данных
В единственной строке выведите i и j — номера элементов, которые нужно поменять местами,
чтобы добиться заданного условия (1 ≤ i, j ≤ n,i != j).
Если ответов несколько — разрешается вывести любой.
Если не существует способа поменять два элемента местами — выведите -1 −1.
Замечания
В первом примере хотя бы один ученик с четным ростом будет стоять на нечетной позиции.
Во втором тесте замена приведет к неправильному состоянию.
В третьем тесте из условия замена приведет шеренгу к валидному состоянию [1,2].
Примеры данных
Пример 1
Ввод:
4
2 1 4 6
Вывод: -1 -1
Пример 2
Ввод:
2
1 2
Вывод: -1 -1
Пример 3
Ввод:
2
2 1
Вывод: 1 2'''

# Partial Solution 3 tests done

n = int(input())
a = list(map(int, input().split()))
 
n_odd = []
n_even = []

for pl, gw in enumerate(a):
    if gw % 2 > (pl+1) % 2:
        n_even.append(pl+1)
    if gw % 2 < (pl+1) % 2:
        n_odd.append(pl+1)
        
if len(n_odd) == len(n_even) == 1:
    print(min(n_odd[0], n_even[0]), max(n_odd[0], n_even[0]))
else:
    print(-1,-1)